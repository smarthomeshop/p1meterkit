#Name of device
substitutions:
  device_name: p1meterkit
  friendly_name: P1MeterKit
  p1meterkit_software_version: "1.1"
  p1meterkit_hardware_version: "V1"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  project:
    name: "smarthomeshop.p1meterkit"
    version: ${p1meterkit_software_version}

esp8266:
 board: d1_mini

# Enable logging
logger:
  baud_rate: 0
  level: DEBUG

# Enable Home Assistant API
api:

ota:
  - platform: esphome

dashboard_import:
  package_import_url: github://smarthomeshop/p1meterkit/p1meterkit.yaml@main

wifi:
  # remove leading '#' and fill in your wifi details
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}
    password: ${device_name}

captive_portal:
    
web_server:
  port: 80

# Status LED of ESP
status_led:
  pin: GPIO16

#LED green
output:
  - platform: esp8266_pwm
    id: output_led_green
    pin: GPIO12
light:
  - platform: monochromatic
    id: light_led_green
    output: output_led_green
    
# Switch to restart the p1meter
switch:
  - platform: restart
    id: switch_restart
    name: "${friendly_name} Restart"
        
# Time for uptime
time:
  - platform: homeassistant
    id: time_homeassistant
    on_time_sync:
      - component.update: sensor_uptime_timestamp
      
  - platform: sntp
    id: time_sntp

# I²C Bus
#
# This component sets up the I²C bus for the ESP8266.
#
# https://esphome.io/components/i2c.html
#
i2c:
  sda: GPIO4
  scl: GPIO5
  scan: true
  frequency: 400kHz

#DSMR part
uart:
  rx_pin:
    number: D7
    inverted: true
  baud_rate: 115200
  rx_buffer_size: 1700
  
dsmr:
  gas_mbus_id: 1
  crc_check: false
  request_pin: D5
  max_telegram_length: 1700
#DSMR part end

sensor:
  #Wifi signal
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 300s
    id: sensor_wifi_signal
  #DSMR Readings
  - platform: dsmr
    energy_delivered_tariff1:
      id: dsmr_electricity_delivered_1
      name: "Energy Consumed Tariff 1"
      state_class: total_increasing
    energy_returned_tariff1:
      id: dsmr_electricity_returned_1
      name: "Energy Produced Tariff 1"
      state_class: total_increasing
    energy_delivered_tariff2:
      id: dsmr_electricity_delivered_2
      name: "Energy Consumed Tariff 2"
      state_class: total_increasing
    energy_returned_tariff2:
      id: dsmr_electricity_returned_2
      name: "Energy Produced Tariff 2"
      state_class: total_increasing
    power_delivered:
      accuracy_decimals: 3
      id: dsmr_electricity_currently_delivered
      name: "Power Consumed"
    power_returned:
      accuracy_decimals: 3
      id: dsmr_electricity_currently_returned
      name: "Power Produced"
    voltage_l1:
      id: dsmr_phase_voltage_l1
      name: "Voltage Phase 1"
    voltage_l2:
      id: dsmr_phase_voltage_l2
      name: "Voltage Phase 2"
    voltage_l3:
      id: dsmr_phase_voltage_l3
      name: "Voltage Phase 3"
    current_l1:
      id: dsmr_phase_power_current_l1
      name: "Current Phase 1"
    current_l2:
      id: dsmr_phase_power_current_l2
      name: "Current Phase 2"
    current_l3:
      id: dsmr_phase_power_current_l3
      name: "Current Phase 3"
    power_delivered_l1:
      accuracy_decimals: 3
      id: dsmr_phase_currently_delivered_l1
      name: "Power Consumed Phase 1"
    power_delivered_l2:
      accuracy_decimals: 3
      id: dsmr_phase_currently_delivered_l2
      name: "Power Consumed Phase 2"
    power_delivered_l3:
      accuracy_decimals: 3
      id: dsmr_phase_currently_delivered_l3
      name: "Power Consumed Phase 3"
    power_returned_l1:
      accuracy_decimals: 3
      id: dsmr_phase_currently_returned_l1
      name: "Power Produced Phase 1"
    power_returned_l2:
      accuracy_decimals: 3
      id: dsmr_phase_currently_returned_l2
      name: "Power Produced Phase 2"
    power_returned_l3:
      accuracy_decimals: 3
      id: dsmr_phase_currently_returned_l3
      name: "Power Produced Phase 3"
    gas_delivered:
      id: dsmr_extra_device_delivered
      name: "Gas Consumed"
      state_class: total_increasing
    # Belgium
    #gas_delivered_be:
    #  name: "Gas Delivered BE"
    
    # Luxembourg
    #energy_delivered_lux:
    #  name: "Energy Delivered Lux"
    #energy_returned_lux:
    #  name: "Energy Returned Lux"
  # Uptime Sensor
  #
  # The uptime sensor allows you to track the time the ESP has stayed up for in
  # seconds. Time rollovers are automatically handled.
  #
  # https://esphome.io/components/sensor/uptime.html
  #
  #
  # WARNING! DO NOT USE THIS SENSOR IN HOME ASSISTANT!
  #
  # I see many of you using this sensor in Home Assistant, but please, don't.
  # There is no need to have an update of the uptime, just send the timestamp
  # of when the device started ONCE. It will have the same effect and saves
  # you system tons of processing and recording.
  #
  - platform: uptime
    id: sensor_uptime
  # Uptime Timestamp Sensor
  #
  # This sensor is an alternative for the uptime sensor, which only sends the
  # startup timestamp of the device ONCE! Instead of sending updates to
  # Home Assistant constantly.
  #
  # This saves you tons of updates to be processed and, if recorded/stored in the
  # Home Assistant database, many many less rows.
  #
  # This sensor can be triggered manually and will only update the status once!
  #
  - platform: template
    id: sensor_uptime_timestamp
    name: "${friendly_name} Uptime"
    device_class: "timestamp"
    accuracy_decimals: 0
    update_interval: never
    lambda: |-
      static float timestamp = (
        id(time_homeassistant).utcnow().timestamp - id(sensor_uptime).state
      );
      return timestamp;
  #HDC1080 temp & hum sensor
  - platform: hdc1080
    temperature:
      id: sensor_temperature
      name: "${friendly_name} Temperature"
      filters:
        offset: -5.5
    humidity:
      id: sensor_humidity
      name: "${friendly_name} Humidity"
      filters:
        offset: 12
    update_interval: 60s

text_sensor:
  - platform: dsmr
    identification:
      name: "${friendly_name} DSMR Identification"
    p1_version:
      name: "${friendly_name} DSMR Version"
    timestamp:
      id: dsmr_timestamp
      internal: true
  # WiFi info #
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP address"
      icon: "mdi:network-outline"
    ssid:
      name: "${friendly_name} Connected SSID"
    bssid:
      name: "${friendly_name} Connected BSSID"
  - platform: version
    id: text_sensor_version
    name: "${friendly_name} ESPHome Version"
  - platform: template
    id: text_sensor_waterp1meterkit_version
    name: "${friendly_name} Software Version"
    update_interval: 5h
    lambda: |-
      return {"${p1meterkit_software_version}"};
  - platform: template
    id: text_sensor_waterp1meterkit_hardware_version
    name: "${friendly_name} Hardware Version"
    update_interval: 5h
    lambda: |-
      return {"${p1meterkit_hardware_version}"};
